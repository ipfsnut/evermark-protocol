// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core Evermarks table - based on evermark-beta schema
model Evermark {
  // Core Identity
  tokenId     Int      @id @map("token_id")
  title       String
  author      String?
  owner       String?
  
  // Content
  description String?
  contentType String?  @map("content_type")
  sourceUrl   String?  @map("source_url")
  tokenUri    String?  @map("token_uri")
  
  // Metadata
  metadataJson     String? @map("metadata_json")
  ipfsImageHash    String? @map("ipfs_image_hash")
  ipfsMetadataHash String? @map("ipfs_metadata_hash")
  
  // Images & Storage
  supabaseImageUrl String? @map("supabase_image_url")
  thumbnailUrl     String? @map("thumbnail_url")
  imageWidth       Int?    @map("image_width")
  imageHeight      Int?    @map("image_height")
  fileSizeBytes    BigInt? @map("file_size_bytes")
  
  // Processing & Cache
  cacheStatus             String?   @map("cache_status")
  cachePriority          Int?      @map("cache_priority")
  metadataProcessedAt    DateTime? @map("metadata_processed_at")
  supabaseUploadedAt     DateTime? @map("supabase_uploaded_at")
  imageProcessingStatus  String?   @map("image_processing_status")
  processingErrors       String?   @map("processing_errors")
  
  // Blockchain
  txHash        String?   @map("tx_hash")
  blockNumber   BigInt?   @map("block_number")
  syncTimestamp DateTime? @map("sync_timestamp")
  lastSyncedAt  DateTime? @map("last_synced_at")
  
  // System
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
  verified       Boolean  @default(false)
  userId         String?  @map("user_id")
  lastAccessedAt DateTime? @map("last_accessed_at")
  accessCount    Int      @default(0) @map("access_count")
  
  // Relations
  user  User? @relation(fields: [userId], references: [id])
  votes Vote[]
  
  @@map("evermarks")
}

// Users table for Farcaster integration
model User {
  id          String   @id @default(uuid())
  fid         Int?     @unique // Farcaster ID
  walletAddress String? @map("wallet_address")
  username    String?
  displayName String?  @map("display_name")
  pfpUrl      String?  @map("pfp_url")
  bio         String?
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  evermarks Evermark[]
  votes     Vote[]
  stakes    Stake[]
  
  @@map("users")
}

// Voting system
model Vote {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  evermarkId Int      @map("evermark_id")
  weight     Int      @default(1)
  txHash     String?  @map("tx_hash")
  
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user     User     @relation(fields: [userId], references: [id])
  evermark Evermark @relation(fields: [evermarkId], references: [tokenId])
  
  @@unique([userId, evermarkId])
  @@map("votes")
}

// Staking for voting power
model Stake {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  amount       String   // BigInt stored as string for precision
  lockedUntil  DateTime? @map("locked_until")
  txHash       String?  @map("tx_hash")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@map("stakes")
}

// Storage tracking
model StorageRecord {
  id           String   @id @default(uuid())
  evermarkId   Int      @map("evermark_id")
  ipfsHash     String?  @map("ipfs_hash")
  ardriveId    String?  @map("ardrive_id")
  fileSize     BigInt?  @map("file_size")
  storageCost  String?  @map("storage_cost") // Decimal stored as string
  provider     String   // "ipfs", "ardrive", "supabase"
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("storage_records")
}

// Content processing jobs
model ProcessingJob {
  id          String   @id @default(uuid())
  evermarkId  Int?     @map("evermark_id")
  jobType     String   @map("job_type") // "metadata", "image", "storage"
  status      String   @default("pending") // "pending", "processing", "completed", "failed"
  input       String?    // Job input data as JSON string
  output      String?    // Job output data as JSON string
  error       String?  // Error message if failed
  retryCount  Int      @default(0) @map("retry_count")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("processing_jobs")
}